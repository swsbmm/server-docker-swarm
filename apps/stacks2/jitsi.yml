# prosodyctl --config /config/prosody.cfg.lua register username meet.jitsi password

version: '3.7'

x-defaults: &defaults
  environment:
    - DISABLE_HTTPS=1
    - TZ=America/Bogota
    - PUBLIC_URL=${SCHEME:-http}://${DOMAIN:-jitsi.localhost}
    - ENABLE_LETSENCRYPT=0
    - DOCKER_HOST_ADDRESS=${DOCKER_HOST_ADDRESS}
#agregando ENABLE_RECORDING para ver si funciona JIBRI.
#    - ENABLE_RECORDING=1

    - ENABLE_AUTH=${ENABLE_AUTH:-1}
    - AUTH_TYPE=${AUTH_TYPE:-internal}
    - ENABLE_GUESTS=${ENABLE_GUESTS:-1}

    - XMPP_DOMAIN=meet.jitsi
    - XMPP_SERVER=xmpp.meet.jitsi
    - XMPP_BOSH_URL_BASE=http://xmpp.meet.jitsi:5280
    - XMPP_AUTH_DOMAIN=auth.meet.jitsi
    - XMPP_MUC_DOMAIN=muc.meet.jitsi
    - XMPP_INTERNAL_MUC_DOMAIN=internal-muc.meet.jitsi
    - XMPP_GUEST_DOMAIN=guest.meet.jitsi
    - XMPP_MODULES=
    - XMPP_MUC_MODULES=
    - XMPP_INTERNAL_MUC_MODULES=

    - JVB_BREWERY_MUC=jvbbrewery
    - JVB_AUTH_USER=jvb
    - JVB_AUTH_PASSWORD=myp@ssw0rd
    - JVB_STUN_SERVERS=stun.l.google.com:19302,stun1.l.google.com:19302,stun2.l.google.com:19302 # TODO: Remove Google
    - JVB_TCP_PORT=${JVB_TCP_PORT:-4443}
    - JVB_TCP_HARVESTER_DISABLED=${JVB_TCP_HARVESTER_DISABLED:-false}

    - JICOFO_COMPONENT_SECRET=mys3cr37
    - JICOFO_AUTH_USER=focus
    - JICOFO_AUTH_PASSWORD=myp@ssw0rd
    - JIGASI_XMPP_USER=jigasi
    - JIGASI_XMPP_PASSWORD=myp@ssw0rd
    - JIGASI_BREWERY_MUC=jigasibrewery
    - JIGASI_PORT_MIN=20000
    - JIGASI_PORT_MAX=20050

    - XMPP_RECORDER_DOMAIN=recorder.meet.jitsi
    - JIBRI_RECORDER_USER=recorder
    - JIBRI_RECORDER_PASSWORD=myp@ssw0rd
    - JIBRI_RECORDING_DIR=/config/recordings
    - JIBRI_FINALIZE_RECORDING_SCRIPT_PATH=/config/finalize.sh
    - JIBRI_XMPP_USER=jibri
    - JIBRI_XMPP_PASSWORD=myp@ssw0rd
    - JIBRI_BREWERY_MUC=jibribrewery
    - JIBRI_PENDING_TIMEOUT=90
    - JIBRI_STRIP_DOMAIN_JID=muc
    - JIBRI_LOGS_DIR=/config/logs
    - DISPLAY=:0

services:
  web:
    <<: *defaults
    image: jitsi/web
    volumes:
      - ${VOLUME_PATH}web:/config
    labels:
      - "traefik.enable=true"
      - "traefik.docker.network=proxy"
      - "traefik.http.routers.web-secure.entrypoints=websecure"
      - "traefik.http.routers.web-secure.rule=Host(`meet.redflox.com`)"
      - "traefik.http.routers.web-secure.service=web"
      - "traefik.http.services.web.loadbalancer.server.port=80"
    #deploy:
      #labels:
      #  - "traefik.enable=true"
      #  - "traefik.docker.network=proxy"
      #  - "traefik.http.routers.web-secure.entrypoints=websecure"
      #  - "traefik.http.routers.web-secure.rule=Host(`meet.redflox.com`)"
      #  - "traefik.http.routers.web-secure.service=web"
      #  - "traefik.http.services.web.loadbalancer.server.port=80"
      #labels:
      #  - traefik.port=80
      #  - traefik.enable=true
      #  - traefik.frontend.rule=Host:${DOMAIN:-jitsi.localhost},${OTHER_DOMAINS}
    networks:
      traefik:
      internal:
        aliases:
          - meet.jitsi

  prosody:
    <<: *defaults
    image: jitsi/prosody
    volumes:
      - ${VOLUME_PATH}prosody:/config
    networks:
      internal:
        aliases:
          - xmpp.meet.jitsi

  jicofo:
    <<: *defaults
    image: jitsi/jicofo
    volumes:
      - ${VOLUME_PATH}jicofo:/config
    networks:
      - internal

  jvb:
    <<: *defaults
    image: jitsi/jvb
    ports:
      - target: ${JVB_TCP_PORT:-4443}
        published: ${JVB_TCP_PORT:-4443}
        protocol: tcp
        mode: host
    volumes:
      - ${VOLUME_PATH}jvb:/config
    deploy:
      update_config:
        order: stop-first
    networks:
      - internal
      - traefik
#JIBRI BETA PARA GRABACIONES
  jibri:
    <<: *defaults
    image: jitsi/jibri:latest
    volumes:
      - ${VOLUME_PATH}jibri:/config
      - /dev/shm:/dev/shm
    cap_add:
      - SYS_ADMIN
      - NET_BIND_SERVICE
    command: >
      sh -c '
      # Obtains the name of the base container.
      export PARENT=$$(basename "$$(head /proc/1/cgroup)");
      # Defines the name of the conatiner with your app for sidecar to follow. 
      export CONT_NAME=myapp_$$(date +%s);
      docker run --rm -d -v /var/run/docker.sock:/var/run/docker.sock -e PARENT -e CHILD=$${CONT_NAME} sixsq/wrapper-cleaner:master 
      && docker run --rm --device /dev/snd --name $${CONT_NAME} jibri'
   # devices:
   #   - /dev/snd:/dev/snd
    depends_on:
      - jicofo
    networks:
      - internal
#----------------------------
volumes:
  web:
  prosody:
  jicofo:
  jvb:
  jibri:

networks:
  internal:
    driver: overlay
    attachable: true
  traefik:
    external: true
    name: proxy
